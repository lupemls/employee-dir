{"version":3,"sources":["components/Employee.js","components/Main.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Employee","state","employees","data","sortAsc","gender","filtered","filter","employee","toLowerCase","this","setState","sorted","sort","a","b","employeesA","name","toUpperCase","employeesB","comparison","onClick","filterGender","noFilter","sortName","map","key","id","job","salary","Component","Main","App","className","Header","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"y3BA4FeA,E,kDAxFb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,UAAWC,EAEXC,SAAS,GALC,E,yDAUDC,GACX,IAAMC,EAAWH,EAAKI,QACpB,SAACC,GAAD,OAAcA,EAASH,OAAOI,gBAAkBJ,KAElDK,KAAKC,SAAS,CAAET,UAAWI,M,iCAG3BI,KAAKC,SAAS,CAAET,UAAWC,M,iCAEjB,IAAD,OA4BHS,EAASF,KAAKT,MAAMC,UAAUW,MAzBpB,SAACC,EAAGC,GACf,EAAKd,MAAMG,QACZ,EAAKO,SAAS,CAACP,SAAS,IAEtB,EAAKO,SAAS,CAACP,SAAS,IAG5B,IAAMY,EAAaF,EAAEG,KAAKC,cACpBC,EAAaJ,EAAEE,KAAKC,cAEtBE,EAAa,EAWjB,OAVIJ,EAAaG,EACfC,EAAa,EACJJ,EAAaG,IACtBC,GAAc,GAIb,EAAKnB,MAAMG,UACVgB,IAAe,GAEZA,KAKTV,KAAKC,SAAS,CAAET,UAAWU,M,+BAGnB,IAAD,OACP,OACE,6BACE,gDACA,4BAAQS,QAAS,kBAAM,EAAKC,aAAa,UAAzC,QACA,4BAAQD,QAAS,kBAAM,EAAKC,aAAa,YAAzC,UACA,4BAAQD,QAAS,kBAAM,EAAKE,aAA5B,OACA,6BACA,4CACA,4BAAQF,QAAS,kBAAM,EAAKG,aAA5B,QACA,6BACA,yCACA,+BACE,+BACE,4BACE,oCACA,sCACA,mCACA,wCAGJ,+BACGd,KAAKT,MAAMC,UAAUuB,KAAI,SAACjB,GAAD,OACxB,wBAAIkB,IAAKlB,EAASmB,IAChB,4BAAKnB,EAASS,MACd,4BAAKT,EAASH,QACd,4BAAKG,EAASoB,KACd,4BAAKpB,EAASqB,mB,GA/EPC,aCURC,MATf,WACE,OACE,6BAEE,kBAAC,EAAD,QCESA,MARf,WACI,OACI,gCACI,oDCOGC,MARf,WACE,OACE,yBAAKC,UAAU,OACX,kBAACC,EAAD,MACA,kBAAC,EAAD,QCIYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0245fa76.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport data from \"../data/employees.json\";\r\n\r\nclass Employee extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      employees: data,\r\n      //value that will be switched between true and false when the sort button is clicked, allowing for ascending and descending sort\r\n      sortAsc: false,\r\n    };\r\n  }\r\n\r\n  //filters the employees based on which gender button is clicked\r\n  filterGender(gender) {\r\n    const filtered = data.filter(\r\n      (employee) => employee.gender.toLowerCase() === gender\r\n    );\r\n    this.setState({ employees: filtered });\r\n  }\r\n  noFilter() {\r\n    this.setState({ employees: data });\r\n  }\r\n  sortName() {\r\n      //sorts employees based off of name\r\n      //had to change to arrow function for this to be read\r\n    const compare = (a, b) => {\r\n      if(this.state.sortAsc){\r\n        this.setState({sortAsc: false})\r\n      }else {\r\n          this.setState({sortAsc: true})\r\n      }\r\n\r\n      const employeesA = a.name.toUpperCase();\r\n      const employeesB = b.name.toUpperCase();\r\n\r\n      let comparison = 0;\r\n      if (employeesA > employeesB) {\r\n        comparison = 1;\r\n      } else if (employeesA < employeesB) {\r\n        comparison = -1;\r\n      }\r\n\r\n      //reverses order each time sort is clicked\r\n      if(this.state.sortAsc){\r\n          comparison *= -1;\r\n      }\r\n      return comparison;\r\n    }\r\n    // console.log(this.state.sortAsc);\r\n    // console.log(this.state.employees.sort(compare));\r\n    const sorted = this.state.employees.sort(compare);\r\n    this.setState({ employees: sorted });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>Filter by Gender</h3>\r\n        <button onClick={() => this.filterGender(\"male\")}>Male</button>\r\n        <button onClick={() => this.filterGender(\"female\")}>Female</button>\r\n        <button onClick={() => this.noFilter()}>All</button>\r\n        <br />\r\n        <h3>Sort by Name</h3>\r\n        <button onClick={() => this.sortName()}>Sort</button>\r\n        <br />\r\n        <h1>Employees</h1>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th>Gender</th>\r\n              <th>Job</th>\r\n              <th>Salary</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.state.employees.map((employee) => (\r\n              <tr key={employee.id}>\r\n                <td>{employee.name}</td>\r\n                <td>{employee.gender}</td>\r\n                <td>{employee.job}</td>\r\n                <td>{employee.salary}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Employee;\r\n","import React from \"react\";\r\nimport Employee from \"./Employee\";\r\n// import Filter from \"./Filter\";\r\n\r\nfunction Main() {\r\n  return (\r\n    <div>\r\n      {/* <Filter /> */}\r\n      <Employee />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\n\r\nfunction Main () {\r\n    return (\r\n        <header>\r\n            <h1>Employee Directory</h1>\r\n        </header>\r\n    );\r\n  };\r\n\r\nexport default Main;","import React from \"react\";\nimport Main from \"./components/Main\";\nimport Header from \"./components/Header\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Header/>\n        <Main />\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}